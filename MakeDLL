#! /bin/sh
#
# MakeDLL: Script to create VTK DLLs for Cygwin (v >= 1.1.7) and MingW.
# Mumit Khan <khan@nanotech.wisc.edu>
#

# Script to create VTK DLLs for Cygwin. The only reason this script
# exists is to avoid the *huge* memory requirement of the GNU linker
# when building the Graphics DLL, and possibly also the Imaging DLL, 
# in one piece. Currently, Cygwin linker can take upto a 600+ MB of 
# VM building the Graphics DLL using the normal scheme: using -DVTKDLL
# to compile the DLL code and then using ``c++ -shared ...'' to build
# the DLL. So, this script builds the DLLs using a slightly different
# technique that is much more resource-friendly: compile the DLL code
# as if building a static library (ie., use -DVTKSTATIC), then run
# `dlltool' to create a DEF file exporting all global symbols, and
# use the ``c++ -shared <DEF_FILE_HERE> ...'' to create the DLL. All
# this script does is to create and then tack on that extra DEF_FILE 
# argument to the compiler driver.

# Invoke this script in the same way you'd invoke the normal command
# to build a DLL. 

# Variables passed in from system.make SHLIB_LD variable.
CXX=${CXX-'c++'}
DLLTOOL=${DLLTOOL-'dlltool'}

# Set to "yes" if you want to create import library for the DLL.
# Cygwin linker will directly link against a DLL, so there's
# really no need.
create_import_library=no

# Set to "no" if you want the default image base and want to supply
# from the command line or Makefile. Trust me, having a whole bunch
# of DLLs that try to relocate isn't a pretty sight.
set_auto_image_base=yes

cmdline="$@"
tmpfile=/tmp/$$.def

trap "rm -f $tmpfile; exit 1" 1 2 15 3

# Create a DEF file from all the object files and non-import library
# archives on the command line. We extract all the .o/.obj/.a files 
# and also get the name of the output DLL.

objfiles=""
dllname="foo.dll"
while [ $# -gt 0 ]; do
  case "$1" in
    *.obj | *.o | *.a) 
      objfiles="$objfiles $1" 
      ;;
    -o)
      if test $# -lt 2; then
        echo "Error: No output DLL specified after -o option"
	exit 1
      fi
      shift
      dllname="$1"
      ;;
    -v)
      set -x
      ;;
  esac
  shift
done

def_file="`echo ${dllname} | \
  sed -e 's, ,_,g' -e 's,\(.*\)\.\(.*\),\1.def,'`"

extra_driver_flags=""
if test "$create_import_library" = "yes"; then
  implib="`echo ${dllname} | \
    sed -e 's, ,_,g' -e 's,\(.*\)\.\(.*\),\1.a,'`"
  extra_driver_flags="$extra_driver_flags -Wl,--out-implib,$implib"
fi
if test "$set_auto_image_base" = "yes"; then
  extra_driver_flags="$extra_driver_flags -Wl,--enable-auto-image-base"
fi

$DLLTOOL --export-all --output-def $tmpfile $objfiles
cat $tmpfile | sed '1d' | awk '{print $1}' > $def_file
rm -f $tmpfile
$CXX $def_file $extra_driver_flags $cmdline
exit $?

